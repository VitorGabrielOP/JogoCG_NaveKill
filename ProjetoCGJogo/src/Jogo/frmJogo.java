package Jogo;


import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 160015
 */
public class frmJogo extends javax.swing.JFrame implements Runnable{

    private boolean baixo;
    private boolean cima;
    private boolean direita;
    private boolean esquerda;
    private boolean reinicio;
    private int score = 0;
    private int hiscore = 0;
    private int scoreAnt = 0;
    private boolean fimJogo;
    private int naves_geradas = 1;
    
    public frmJogo() {
        initComponents();
        createBufferStrategy(2);
        Thread t = new Thread(this);
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1171, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
       if(evt.getKeyCode() == KeyEvent.VK_UP) {
            cima = true;
        } else if(evt.getKeyCode() == KeyEvent.VK_DOWN) {
            baixo = true;
        } else if(evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            direita = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            esquerda = true;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            reinicio = true;
        } 
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_UP) {
            cima = false;
        } else if(evt.getKeyCode() == KeyEvent.VK_DOWN) {
            baixo = false;
        } else if(evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            direita = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
            esquerda = false;
        } else if (evt.getKeyCode() == KeyEvent.VK_R) {
            reinicio = false;
        }
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmJogo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmJogo().setVisible(true);
            }
        });
    }

    @Override
    public void run() {
        Graphics g;
        ArrayList<NaveInimiga> inimigos = new ArrayList<NaveInimiga>(); 
        ArrayList<Base> fora = new ArrayList<Base>();
        ArrayList<CaixaVida> vidas_extras = new ArrayList<CaixaVida>();
        
        BG bg = new BG("img/bg.png");
        bg.setX(0);
        bg.setY(0);
        NaveJogador nPlayer = new NaveJogador("img/nave_j.png");
        nPlayer.setX(15);
        nPlayer.setY(200); //Colocar no meio da tela
        
        score = 0;
        
        while(true){
            g = getBufferStrategy().getDrawGraphics();
            
            bg.desenhar(g);
            nPlayer.desenhar(g);
            
            //Informações no topo da tela
            g.setColor(Color.red);
            g.setFont(new Font("Century", Font.BOLD, 15)); //Fonte nativa gameovercre
            g.drawString("Score: " + score + "", 10, 45);
            g.drawString("Hi-Score: " + hiscore + "", 10, 60);
            g.drawString("Vida: " + nPlayer.getVidas() + "%", getWidth() - 100, 45);
            
            //Quantidade de naves inimigas a serem geradas nesta rodada
            if(score < 500)
                naves_geradas = 1;
            else if(score < 1500)
                naves_geradas = 2;
            else if(score < 5000)
                naves_geradas = 4;
            else if(score < 10000)
                naves_geradas = 8;
            else
                naves_geradas = 12;
            
            //Geração das naves inimigas
            if(inimigos.size() <= fora.size()){
                for(int i = 0; i < naves_geradas; i++){
                    Random x = new Random();
                    int x_ini = x.nextInt(200);
                    x_ini += 1000;
                    
                    Random y = new Random(); //Gera o Y para a geração de nave inimiga
                    int y_ini = y.nextInt(400);

                    NaveInimiga nInimigo = new NaveInimiga("img/nave_i.png");
                    nInimigo.setX(x_ini);
                    nInimigo.setY(y_ini);
                    nInimigo.setIncX(-1);
                    nInimigo.setIncY(0);

                    inimigos.add(nInimigo);
                }
            }
            for(NaveInimiga ni : inimigos)
                ni.mover();
            
            for(NaveInimiga ni : inimigos)
                ni.desenhar(g);
            
            //Movimentação do Jogador
            if(cima && (nPlayer.getY() > 21)){
                nPlayer.setIncY(-1);
                nPlayer.mover();
            }
            else{
                if(baixo && (nPlayer.getY() < getHeight() - 93)){
                    nPlayer.setIncY(1);
                    nPlayer.mover();
                }
                else{
                    nPlayer.setIncY(0);
                }
            }
            
            if(direita && (nPlayer.getX() < 200)){
                nPlayer.setIncX(1);
                nPlayer.mover();
            }
            else {
                if(esquerda && (nPlayer.getX() > 15)){
                    nPlayer.setIncX(-1);
                    nPlayer.mover();
                }
                else{
                    nPlayer.setIncX(0);
                }
            }
            
            //Checa se um inimigo saiu da tela e penaliza o jogador em 20% de vida
            for(NaveInimiga ni : inimigos){
                if(ni.getX() == 0){
                    nPlayer.setVidas(nPlayer.getVidas() - 20);
                    fora.add(ni);
                }
            }
            
            //Tratar colisão -> Jogador e Nave Inimiga
            for(NaveInimiga ni : inimigos){
                if(nPlayer.colisao(ni)){
                    nPlayer.setVidas(nPlayer.getVidas() - 1);
                    ni.setX(1200);
                    ni.setY(500);
                    ni.setIncX(0);
                    score += 100;
                    fora.add(ni);
                }
            }
            
            //Criar caixa de Vida   
            Random ve = new Random();
            int gerar;
            if(score < 10000)
                gerar = ve.nextInt(4095); //Gera um valor aleatório entre 0 e 4095
            else
                gerar = ve.nextInt(2047);
            
            if(gerar == 1){
                Random vy = new Random();
                int pvy = vy.nextInt(400);

                CaixaVida vida_extra = new CaixaVida("img/cvida.png");
                vida_extra.setX(getWidth() - 96);
                vida_extra.setY(pvy);
                vida_extra.setIncX(-1);
                vida_extra.setIncY(0);

                vidas_extras.add(vida_extra);
            }
            for(CaixaVida cxv : vidas_extras){
                cxv.mover();
            }
            
            for(CaixaVida cxv : vidas_extras){
                cxv.desenhar(g);
            }
            
            //Aumentar vida do jogador
            for(CaixaVida cxv : vidas_extras){
                if(nPlayer.colisao(cxv)){
                    if((nPlayer.getVidas() + 15) < 100)
                        nPlayer.setVidas(nPlayer.getVidas() + 15);
                    else
                        nPlayer.setVidas(100);
                        
                    score += 50;
                    fora.add(cxv);
                    cxv.setIncX(1500);
                    cxv.setIncY(1500);
                }
            }
            
            //Tratar Fim de Jogo
            if(nPlayer.getVidas() <= 0){
                bg.desenhar(g);
                scoreAnt = score;
                g.setColor(Color.red);
                g.setFont(new Font("Century", Font.BOLD, 35));
                g.drawString("FIM DE JOGO", 450 , 100);
                g.setFont(new Font("Century", Font.BOLD, 20));
                g.drawString("Pressione a tecla R para reiniciar", 370, 120);
                //g.setFont(new Font("gameovercre", Font.BOLD, 20));
                //g.drawString("Pontuacao final: " + scoreAnt + "", 370, 140);
                if(score > hiscore){
                    g.setColor(Color.yellow);
                    g.setFont(new Font("gameovercre", Font.BOLD, 20));
                    g.drawString("NOVO RECORDE!", 370, 180);
                    hiscore = score;
                }
                score = 0;
                fimJogo = true;
                inimigos.clear();
                fora.clear();
                vidas_extras.clear();
                
            }
            
            //Reinício de Jogo
            if(fimJogo && reinicio){
                nPlayer.setVidas(100);
                fimJogo = false;
            }
            
            g.dispose();
            getBufferStrategy().show();
            try {
                Thread.sleep(5);
            } catch (InterruptedException ex){
                
            }
        }
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
